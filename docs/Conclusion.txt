Installer
npm install @angular/cli@latest

Si installation local (sans "-g")
ng = 
node_modules/@angular/cli/bin/ng

Créer un projet
ng new TRUC

Ouvrir un projet
ng serve --open

Créer un composant
ng generate component TRUC

###################

Créé une classe -> src/app

export class Hero {
  id: number;
  name: string;
}

UppercasePipe -> pipe (comme le bash)
{{hero.name | uppercase}} Details
accède au nom du héro, l'affiche en MAJUSCULE et affiche "Détails"

Liaison bidirectionnelle
	lie un champs d'une classe avec par exemple un champs d'un formulaire
<input [(ngModel)]="hero.name" placeholder="name">
Modifie le nom directement en modifiant le champ

####################

Installation de boostrasp
npm install bootstrap --save
npm install --save font-awesome

angular.json
"styles": [
  "../node_modules/bootstrap/dist/css/bootstrap.min.css",
  "styles.css",
  "../node_modules/font-awesome/css/font-awesome.css"
],

####################

ajout évenementt clique
(click)="onSelect(hero)"


définition de l’evenement
onSelect(hero: Hero): void {
  this.selectedHero = hero;
}

ajout de css conditionnel
[class.selected]="hero === selectedHero"

####################

refactoring
Divise l'affichage des detail et la liste

dans le .ts des details
import { Component, OnInit, Input } from '@angular/core';
import { Hero } from '../hero';
@Input() hero: Hero;
import le input effectué dans héro pour le mettre dans le "hero"

dans le template de la liste
<app-hero-detail [hero]="selectedHero"></app-hero-detail>
lie la propriété héro (hero-detail) au hero sélectionné (herocomponent)

####################

créer un service
ng generate service TRUC

Création d'une unique instance quand la classe est demander
  providers: [
    HeroService,
/* . . . */
  ],

